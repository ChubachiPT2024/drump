@startuml
class ChipAmountNegativeError extends Error
class ChipAmountNonIntegerError extends Error
class ChipAmount {
    +value: number
    +plus(other: ChipAmount): ChipAmount
    +canMinus(other: ChipAmount): boolean
    +minus(other: ChipAmount): ChipAmount
    +multiplyAndCeil(rate: number): ChipAmount
}
class Balance {
    +value: number
    +{static} create(before: ChipAmount, after: ChipAmount): Balance
}
class Card {
    +rank: Rank
    +suit: Suit
    +getSoftPoint(): number
    +getHardPoint(): number
    +equals(other: Card): boolean
    -{static} softPoints: { A: number; 2: number; 3: number; 4: number; 5: number; 6: number; 7: number; 8: number; 9: number; 10: number; J: number; Q: number; K: number; }
    -{static} hardPoints: { A: number; 2: number; 3: number; 4: number; 5: number; 6: number; 7: number; 8: number; 9: number; 10: number; J: number; Q: number; K: number; }
}
class Hand {
    -cards: Card[]
    -isStand: boolean
    +add(card: Card): Hand
    +calculateSoftTotal(): number
    +calculateHardTotal(): number
    +calculateTotal(): number
    +count(): number
    +isBlackJack(): boolean
    +isBust(): boolean
    +canHit(): boolean
    +canSplit(): boolean
    +stand(): Hand
    +isResolved(): boolean
    +getCards(): Card[]
    +{static} create(): Hand
}
class BasicStrategyCalculatorStrategyUndefinedError extends Error
class BasicStrategyCalculator {
    -{static} splitStrategies: Map<number, Map<Rank, HandSignal>>
    -{static} hardHandStrategies: Map<number, Map<Rank, HandSignal>>
    -{static} softHandStrategies: Map<number, Map<Rank, HandSignal>>
    +{static} calculate(hand: Hand, upCard: Card): HandSignal
    -{static} calculateSplitStrategy(hand: Hand, upCard: Card): HandSignal
    -{static} calculateSoftHandStrategy(softTotal: number, upCard: Card): HandSignal
    -{static} calculateHardHandStrategy(hardTotal: number, upCard: Card): HandSignal
    -{static} clamp(value: number, min: number, max: number): number
}
class DealerId {
    +value: string
}
interface DealerNotification {
    +notifyUpCard(upCard?: Card): void
}
class Dealer {
    +id: DealerId
    -hand: Hand
    +addCardToHand(card: Card): void
    +getHand(): Hand
    +stand(): void
    +getUpCard(): Card
    +shouldHit(): boolean
    +discard(): void
    +notify(notification: DealerNotification): void
    +{static} create(id: DealerId): Dealer
}
interface DealerFactory {
    +create(): Dealer
}
class Deck {
    -cards: Card[]
    +getCards(): Card[]
    +{static} create(): Deck
}
class UserId {
    +value: string
}
class PlayerCreditShortageError extends Error
class PlayerId {
    +value: string
}
interface PlayerNotification {
    +notifyId(id: PlayerId): void
    +notifyHand(hand: Hand): void
    +notifyHandSignalOptions(handSignalOptions: HandSignal[]): void
    +notifyCredit(credit: ChipAmount): void
    +notifyBetAmount(betAmount: ChipAmount): void
}
class Player {
    +id: PlayerId
    +userId: UserId
    -credit: ChipAmount
    -betAmount: ChipAmount
    -hand: Hand
    +addCardToHand(card: Card): void
    +getHand(): Hand
    +getHandSignalOptions(): HandSignal[]
    +stand(): void
    +getCredit(): ChipAmount
    +getBetAmount(): ChipAmount
    +bet(amount: ChipAmount): void
    +collectPayoff(amount: ChipAmount): void
    +collectBet(): void
    +loseBet(): void
    +discard(): void
    +notify(notification: PlayerNotification): void
    +{static} INITIAL_CREDIT: ChipAmount
    +{static} create(id: PlayerId, userId: UserId): Player
}
class RankingCalculator {
    +{static} calculate(scoreMap: Map<TKey, number>): Map<TKey, number>
}
class RoundCountExceedsMaximumError extends Error
class RoundCount {
    +value: number
    +increment(): RoundCount
    +{static} MAX_ROUND_COUNT: 10
    +{static} ZERO: RoundCount
}
class RoundPlayerHistory {
    +id: PlayerId
    +result: RoundResult
    +credit: ChipAmount
}
class RoundHistory {
    +roundCount: RoundCount
    +dealersHand: Hand
    +players: RoundPlayerHistory[]
}
class RoundResultCalculator {
    +calculate(playersHand: Hand, dealersHand: Hand): RoundResult
}
class Shoe {
    -cards: Card[]
    +suffle(): Shoe
    +peek(): Card
    +draw(): Shoe
    +{static} createFromDecks(numberOfDecks: number): Shoe
}
class MatchCannotHitError extends Error
class MatchId {
    +value: string
}
interface MatchNotification {
    +notifyId(id: MatchId): void
    +notifyDealer(dealer: Dealer): void
    +notifyPlayers(players: Player[]): void
    +notifyRoundCount(roundCount: RoundCount): void
    +notifyIsCompleted(isCompleted: boolean): void
}
class MatchPlayerNotFoundError extends Error
class MatchUpCardUndefinedError extends Error
class Match {
    +id: MatchId
    -shoe: Shoe
    -dealer: Dealer
    -players: Player[]
    -roundCount: RoundCount
    -roundResultCalculator: RoundResultCalculator
    -roundHistories: RoundHistory[]
    +startRound(): void
    +bet(playerId: PlayerId, amount: ChipAmount): void
    +dealCardToDealer(): void
    +hit(playerId: PlayerId): void
    +stand(playerId: PlayerId): void
    +resolveDealersHand(): void
    +completeRound(): void
    +settleRound(playerId: PlayerId): void
    -calculateRoundResult(playerId: PlayerId): RoundResult
    +getRoundCount(): RoundCount
    +getRoundHistories(): RoundHistory[]
    +isCompleted(): boolean
    -getPlayer(playerId: PlayerId): Player
    +getPlayerIds(): PlayerId[]
    +calculateBasicStrategy(playerId: PlayerId): HandSignal
    +getUserId(playerId: PlayerId): UserId
    +calculateRanking(): Map<string, number>
    +notify(notification: MatchNotification): void
    -{static} NUMBER_OF_DECKS: 6
    +{static} create(id: MatchId, dealer: Dealer, players: Player[]): Match
    -{static} calculatePayoff(hand: Hand, betAmount: ChipAmount): ChipAmount
}
interface MatchFactory {
    +create(userIds: UserId[]): Match
}
interface MatchRepository {
    +saveAsync(match: Match): Promise<void>
    +findAsync(id: MatchId): Promise<Match>
}
interface PlayerFactory {
    +create(userId: UserId): Player
}
interface PlayerRepository {
    +saveAsync(player: Player): Promise<void>
    +findAsync(id: PlayerId): Promise<Player>
}
class UserName {
    +value: string
}
class User {
    +id: UserId
    +name: UserName
}
interface UserFactory {
    +create(name: UserName): User
}
interface UserRepository {
    +saveAsync(user: User): Promise<void>
    +findAsync(id: UserId): Promise<User>
    +findAllAsync(): Promise<User[]>
}
Balance --> "1" ChipAmount
Hand --> "*" Card
Hand --> "1" Card
BasicStrategyCalculator --> "1" Hand
BasicStrategyCalculator --> "1" Card
DealerNotification --> "1" Card
Dealer --> "1" DealerId
Dealer --> "1" Hand
Dealer --> "1" Card
Dealer --> "1" DealerNotification
DealerFactory --> "1" Dealer
Deck --> "*" Card
PlayerNotification --> "1" PlayerId
PlayerNotification --> "1" Hand
PlayerNotification --> "1" ChipAmount
Player --> "1" PlayerId
Player --> "1" UserId
Player --> "1" ChipAmount
Player --> "1" Hand
Player --> "1" Card
Player --> "1" PlayerNotification
RoundPlayerHistory --> "1" PlayerId
RoundPlayerHistory --> "1" ChipAmount
RoundHistory --> "1" RoundCount
RoundHistory --> "1" Hand
RoundHistory --> "*" RoundPlayerHistory
RoundResultCalculator --> "1" Hand
Shoe --> "*" Card
Shoe --> "1" Card
MatchNotification --> "1" MatchId
MatchNotification --> "1" Dealer
MatchNotification --> "1" Player
MatchNotification --> "1" RoundCount
Match --> "1" MatchId
Match --> "1" Shoe
Match --> "1" Dealer
Match --> "*" Player
Match --> "1" RoundCount
Match --> "1" RoundResultCalculator
Match --> "*" RoundHistory
Match --> "1" PlayerId
Match --> "1" ChipAmount
Match --> "1" Player
Match --> "*" PlayerId
Match --> "1" UserId
Match --> "1" MatchNotification
Match --> "1" Hand
MatchFactory --> "1" UserId
MatchFactory --> "1" Match
MatchRepository --> "1" Match
MatchRepository --> "1" MatchId
PlayerFactory --> "1" UserId
PlayerFactory --> "1" Player
PlayerRepository --> "1" Player
PlayerRepository --> "1" PlayerId
User --> "1" UserId
User --> "1" UserName
UserFactory --> "1" UserName
UserFactory --> "1" User
UserRepository --> "1" User
UserRepository --> "1" UserId
UserRepository --> "*" User
@enduml